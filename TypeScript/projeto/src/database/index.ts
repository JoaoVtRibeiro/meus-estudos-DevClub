import mongoose from 'mongoose' // Equivante ao Sequelize (SQL), para o MongoDB

export async function setupMongo(): Promise<void> { // Fun√ß√£o para configurar o mongoose / conex√£o com o banco de dados
    try {
        if (mongoose.connection.readyState === 1) { // readyState j√° √© do pr√≥prio moongose, quando o banco est√° conectado √† aplica√ß√£o, o status ser√° 1
            return // return vazio apenas para cancelar qualquer execu√ß√£o posterior/ a baixo (j√° que se ele j√° estiver conectado, n√£o √© necess√°rio fazer mais nada)
        }

        console.log('üé≤ Connecting to DB...') // Mensangem enquanto n√£o conecta

        await mongoose.connect(process.env.MONGO_URL as string) // Conex√£o ao bando + obs no final do arquivo
        console.log('‚úî DB Connected!') // Aviso de Conectado
    } catch {
        throw new Error('‚ùå DB not connected') // Aviso de Falha na conex√£o
    }
}


/* 
    Obs: await mongoose.connect(process.env.MONGO_URL as string)

    Tipagem

        - process.env √© uma tipagem do node (o typescript n√£o entende por si s√≥)
        - MONGO_URL √© uma variavel de ambiente
        - Para acessar variaveis de ambiente, o node precisa de um pacote de tipagens do node
        - Para instalar a pacote = npm i -D @types/node, para utilizar os recursos nativos do node e o typescript conseguir entendelos

        Basicamente, esse pacote vai permitir o typescript entender esses tipagens, assim dando acesso ao node para utilizalas

    Para acessar as variaveis de ambiente
        - npm i dotenv, uma biblioteca para acessar as variaveis de ambiente

    as string
        - A variavel de ambiente pode vir como string ou undefined, se ela vier undefined o banco n√£o ir√° conectar,
          ent√£o colocando 'as string' faz o typescript assumir que ser√° utilizado apenas a tipagem de string

*/