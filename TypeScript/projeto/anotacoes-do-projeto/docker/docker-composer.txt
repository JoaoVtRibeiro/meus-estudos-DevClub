Docker Composer

    Uma extensão do Docker, que permite orquestrar a execução de vários containers em conjunto, 
    facilitando o gerenciamento de aplicações compostas por diferentes serviços.

    Você pode definir os serviços, redes e volumes necessários para sua aplicação em um arquivo YAML.
    Esse arquivo descreve a configuração do ambiente, incluindo as imagens Docker a serem utilizadas, as portas a serem expostas, 
    as variáveis de ambiente, as dependências entre os serviços e outras configurações.

    Resumindo, é como serão os containers serão criados/modelados, é a "receita dos containers"

---------------------------------------------------------------------------------------------------------------------

    - Para rodar o DockerComposer: docker-compose up -d

        Executando o comando "docker-compose up", o Docker Compose irá ler o arquivo YAML cria e 
        inicia automaticamente os containers necessários para sua aplicação, garantindo que eles estejam interconectados e funcionando corretamente.

---------------------------------------------------------------------------------------------------------------------

    Descrição dos comandos do arquivo do projeto como exemplo:

    version: '3'                                            // número da versão

    services:                                               // Configuração/"Receita" dos serviços
        mongo:                                              // Configuração do container do banco
            container_name: mongodb                         // Nome do container
            restart: always                                 // Sempre reiniciar (quando ele cair, ele volta)
            image: mongo                                    // Nome da imagem
            environment:                                    // Definição dos valores das variaveis de ambiente (Obs: Os valores tem que ser em caixa alta/maiúsculas)
                MONGO_INITDB_ROOT_USERNAME: 'devbills'      // Valor do Username da imagem 
                MONGO_INITDB_ROOT_PASSWORD: 'pass123'       // Valor da Senha da imagem
            ports:                                          // Definição da porta
                - '27017:27017'                             // 27017:27017 é a porta do mongo
            networks:                                       // Definição da Rede
                - local                                     // rede local

        app:                                                // Configuração do container da aplicação
            depends_on:                                     // Dependências
                - mongo                                     // Banco de dados que será utilizado
            container_name: devbills-api                    // Nome do container
            build:                                          // Definição da construção
                context: .                                  // Caminho aonde se encontra o arquivo da imagem para se basear (No caso já está na raiz, por isso o ".")
                dockerfile: Dockerfile                      // Imagem que será utilizada
            volumes:                                        // Qual será a base da aplicação, baseado no "workdir" do dockerfile 
            - ./:/home/app                                  // Caminho da base da aplicação (isso faz com que qualquer alteração feita no projeto reflita no container, sem precisar rodar o build toda vez)
            ports:                                          // Definição da porta
                - '3333:3333'                               // Porta que está sendo utilizada na aplicação
            networks:                                       // Definição da Rede
                - local                                     // rede local

    networks:                                               // Configuração da rede (Uma garantia que app e o mongo consigam se comunicar por estarem na mesma rede)
        local:                                              // Definição da Rede para as outras duas configurações/"receitas"
            name: local                                     // Nome da rede
                

        A identação é algo critico na construção de um arquivo .yml, caso algo tiver de errado pode acontecer errors como "services.networks Additional property local is not allowed" 

        Obs: quando uma propriedade é passada com "-" no inicio, o yml entenderá como uma array, quando não será uma string